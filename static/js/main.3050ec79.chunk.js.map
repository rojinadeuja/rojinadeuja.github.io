{"version":3,"sources":["Components/Shared/Header.js","Components/Main/Home/Home.js","Components/Main/Main.js","Components/Shared/Footer.js","App.js","serviceWorker.js","index.js"],"names":["header","className","href","home","main","Home","footer","id","method","action","type","style","paddingBottom","borderBottomStyle","App","Header","Main","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAWeA,G,UATA,WACX,OAAO,yBAAKC,UAAU,OAClB,wBAAIA,UAAU,iBACV,4BAAI,uBAAGA,UAAU,eAAeC,KAAK,4CAAjC,aACJ,4BAAI,uBAAGD,UAAU,eAAeC,KAAK,kCAAjC,eCcDC,EAlBF,WACT,OAAO,6BACH,yBAAKF,UAAU,mBACX,yBAAKA,UAAU,0BACX,uBAAGA,UAAU,gBACT,wHADJ,wPAGA,uBAAGA,UAAU,gBAAb,gVAGA,uBAAGA,UAAU,gBACT,2EADJ,6HACsL,4FCLvLG,EAJF,WACT,OAAO,kBAACC,EAAD,OCGIC,EANA,WACX,OAAO,0BAAMC,GAAG,WAAWC,OAAO,MAAMC,OAAO,uCAC3C,4BAAQF,GAAG,eAAeG,KAAK,UAAS,0BAAMC,MAAO,CAAEC,cAAe,QAASC,kBAAmB,UAA1D,sBCmBjCC,MAhBf,WACE,OACE,yBAAKb,UAAU,WACb,4BAAQA,UAAU,UAChB,kBAACc,EAAD,OAEF,0BAAMd,UAAU,QACd,kBAACe,EAAD,OAEF,4BAAQf,UAAU,UAChB,kBAACgB,EAAD,SCLYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3050ec79.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst header = () => {\r\n    return <nav className=\"nav\">\r\n        <ul className=\"connect-links\">\r\n            <li><a className=\"connect-link\" href=\"https://www.linkedin.com/in/rojinadeuja/\">LinkedIn</a></li>\r\n            <li><a className=\"connect-link\" href=\"https://github.com/rojinadeuja\">Github</a></li>\r\n        </ul>\r\n    </nav>\r\n}\r\n\r\nexport default header;","import React from 'react';\r\n\r\nconst home = () => {\r\n    return <div>\r\n        <div className=\"profile-section\">\r\n            <div className=\"large-text profile-txt\" >\r\n                <p className=\"large-text-p\">\r\n                    <strong>Hello! I am Rojina Deuja, a MSCS student at the University of Nebraska-Lincoln (UNL)</strong>, working as a Graduate Teaching Assistant for courses closely related to Data and Software Engineering. I have over 2 years of industry experience providing Data Warehousing and Business Intelligence services for clients in and outside the US.\r\n                </p>\r\n                <p className=\"large-text-p\">\r\n                    I am working with Dr. Mohammad Rashedul Hasan on Natural Language Processing, exploring ways to handle enterprise-level data to understand customers and improve businesses. My goal is to relay the knowledge and experiences I have gathered working with multiple businesses into creating innovative and intelligent software solutions.\r\n                </p>\r\n                <p className=\"large-text-p\">\r\n                    <strong>I have a strong programming background.</strong> I enjoy learning new things and can assimilate new ideas quickly. My ideal job would be a Full-stack Software Developer. <strong>I am currently looking for Summer 2021 internships!</strong>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default home;","import React from 'react';\r\nimport Home from './Home/Home'\r\n\r\n\r\nconst main = () => {\r\n    return <Home />\r\n}\r\n\r\nexport default main;","import React from 'react';\r\n\r\nconst footer = () => {\r\n    return <form id='download' method=\"get\" action=\"assets/deuja_rojina_resume_2020.pdf\">\r\n        <button id='btn-download' type=\"submit\"><span style={{ paddingBottom: '0.5em', borderBottomStyle: 'solid' }}>Download Resume</span></button>\r\n    </form>\r\n}\r\n\r\nexport default footer;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Shared/Header';\nimport Main from './Components/Main/Main';\nimport Footer from './Components/Shared/Footer';\n\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <header className=\"header\">\n        <Header></Header>\n      </header>\n      <main className=\"main\">\n        <Main></Main>\n      </main>\n      <footer className=\"footer\">\n        <Footer></Footer>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}